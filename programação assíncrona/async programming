A programação assíncrona é uma abordagem para realizar tarefas sem bloquear a execução de outras partes do programa. 

    é importante pois permite que tarefas demoradas sejam realizadas em segundo plano, mantendo a interface do usuário responsiva.

Principais Conceitos de Programação Assíncrona

    1. Thread: Unidade básica de execução paralela.
    
        Thread {
            val result = performHeavyTask()
            runOnUiThread {
                println("Resultado: $result")
            }
        }.start()

        fun performHeavyTask(): String {
            Thread.sleep(3000) // Simula uma operação longa
            return "Tarefa concluída"
        }

    2. Callback: Funções que são chamadas quando uma tarefa assíncrona é concluída.

        fun fetchData(callback: (String) -> Unit) {
            Thread {
                val result = performHeavyTask()
                callback(result)
            }.start()
        }

        fetchData { result ->
            println("Dados recebidos: $result")
        }

    3. Coroutines: Abordagem moderna no Kotlin para lidar com programação assíncrona.

        fun main() {
            GlobalScope.launch {
                val result = performHeavyTask()
                println("Resultado: $result")
            }
        }

        suspend fun performHeavyTask(): String {
            delay(3000) // Simula operação longa sem bloquear a thread
            return "Tarefa concluída"
        }


    4. RxJava: Biblioteca reativa para lidar com eventos assíncronos e fluxos de dados.

        fun main() {
            Observable.fromCallable {
                performHeavyTask()
            }
            .subscribeOn(Schedulers.io()) // Executa em segundo plano
            .observeOn(Schedulers.single()) // Observa na thread principal
            .subscribe { result ->
                println("Resultado: $result")
            }
        }

Dispatchers são responsáveis por determinar em qual thread ou pool de threads uma coroutine será executada. 

Tipos de Dispatchers:
    - Dispatchers.Main: main thread (UI thread).
    - Dispatchers.IO: Otimizado para operações de entrada/saída (I/O).
    - Dispatchers.Default: tarefas intensivas de CPU, como cálculos complexos
    - Dispatchers.Unconfined: sem vinculação inicial a um thread específico.
    - Custom Dispatchers: personalizado para um controle avançado, usando Executors 

O lifecycleScope e o viewModelScope são ferramentas para gerenciar coroutines no ciclo de vida do Android. evitar vazamentos de memória e garantem que as coroutines sejam executadas apenas enquanto o componente relacionado estiver ativo.

Melhores Práticas
    1. Escolha o escopo certo:
    
        Use lifecycleScope para tarefas relacionadas diretamente ao ciclo de vida da interface (ex.: carregar uma lista de dados).
        
        Use viewModelScope para operações que devem sobreviver à recriação do componente, como durante mudanças de configuração.
    
    2. Evite vazamentos de memória: 
    
        O gerenciamento automático de lifecycleScope e viewModelScope ajuda a evitar coroutines ativas após a destruição de componentes.

    3. Combine com outras ferramentas:

        Combine viewModelScope com StateFlow ou LiveData para manter dados reativos.
        Use lifecycleScope com métodos como launchWhenStarted para evitar atualizações fora do ciclo de vida ativo.
    
    4. Não bloqueie o escopo principal:
    
        Sempre use Dispatchers.IO ou Dispatchers.Default para tarefas pesadas.